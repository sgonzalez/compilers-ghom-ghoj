#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require './compiler.rex.rb'
	require './reflectivevisitor.rb'

	$ast = AbstractNode.new(:root)

class CompilerLanguage < Racc::Parser

module_eval(<<'...end new_compiler.y/module_eval...', 'new_compiler.y', 37)

	def parse(input)
		scan_str(input)
	end

...end new_compiler.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     9,    30,     8,   -12,    10,   -18,    12,     9,    13,     8,
   -12,    10,    20,    12,     9,    13,     8,   -12,    10,    27,
    12,     9,    13,     8,   -12,    10,    22,    12,    24,    13,
    10,    22,    12,    21,    22,    10,   -18,    12,    10,    22,
    12,    25,    22,    10,   -19,    12,    10,    19,    12,    33,
    32,    34,   -20,    35,    17,    27,    38,    39,    16,    41,
    42,    43,    14,    45 ]

racc_action_check = [
     0,    23,     0,     0,     0,     9,     0,    43,     0,    43,
    43,    43,     9,    43,    38,    43,    38,    38,    38,    18,
    38,     2,    38,     2,     2,     2,    32,     2,    13,     2,
    32,    12,    32,    11,    24,    12,    22,    12,    24,    21,
    24,    14,    20,    21,    10,    21,    20,     7,    20,    26,
    26,    27,    30,    31,     6,    34,    35,    36,     4,    40,
    41,    42,     1,    44 ]

racc_action_pointer = [
    -5,    62,    16,   nil,    56,   nil,    52,    39,   nil,    -5,
    34,    23,    26,    17,    41,   nil,   nil,   nil,    14,   nil,
    37,    34,    26,   -11,    29,   nil,    47,    45,   nil,   nil,
    42,    41,    21,   nil,    50,    42,    53,   nil,     9,   nil,
    44,    44,    47,     2,    48,   nil ]

racc_action_default = [
    -2,   -24,    -2,    -3,   -24,    -5,   -24,   -24,   -11,   -14,
   -15,   -24,   -24,   -24,   -24,    -1,    -4,    -6,   -24,   -13,
   -24,   -24,   -14,   -24,   -24,    46,   -24,    -9,   -23,   -16,
   -17,   -24,   -24,    -8,   -24,   -24,   -24,   -10,    -2,    -7,
   -24,   -21,   -24,    -2,   -24,   -22 ]

racc_goto_table = [
     1,    23,    15,    26,    18,   nil,   nil,   nil,   nil,    28,
    29,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,    37,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,    44 ]

racc_goto_check = [
     1,     4,     1,     9,     8,   nil,   nil,   nil,   nil,     4,
     4,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,     9,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,
   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   -11,   nil,   nil,   nil,    -3,   -15,
   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     7,   nil,   nil,
    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 19, :_reduce_1,
  0, 19, :_reduce_none,
  1, 20, :_reduce_3,
  2, 20, :_reduce_4,
  1, 20, :_reduce_5,
  2, 20, :_reduce_6,
  6, 21, :_reduce_7,
  4, 21, :_reduce_8,
  1, 27, :_reduce_9,
  3, 27, :_reduce_10,
  1, 25, :_reduce_11,
  0, 25, :_reduce_none,
  1, 26, :_reduce_13,
  1, 22, :_reduce_14,
  1, 22, :_reduce_15,
  3, 22, :_reduce_16,
  3, 22, :_reduce_17,
  1, 28, :_reduce_18,
  1, 28, :_reduce_19,
  3, 28, :_reduce_20,
  7, 23, :_reduce_21,
  11, 23, :_reduce_22,
  3, 24, :_reduce_23 ]

racc_reduce_n = 24

racc_shift_n = 46

racc_token_table = {
  false => 0,
  :error => 1,
  :SEMICOLON => 2,
  "=" => 3,
  ";" => 4,
  :NAME => 5,
  :COMMA => 6,
  :CONST => 7,
  :INT => 8,
  :NUMBER => 9,
  :OP => 10,
  :OPENPAREN => 11,
  :CLOSEPAREN => 12,
  "if" => 13,
  :OPENBRACE => 14,
  :CLOSEBRACE => 15,
  "else" => 16,
  :EQUALS => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SEMICOLON",
  "\"=\"",
  "\";\"",
  "NAME",
  "COMMA",
  "CONST",
  "INT",
  "NUMBER",
  "OP",
  "OPENPAREN",
  "CLOSEPAREN",
  "\"if\"",
  "OPENBRACE",
  "CLOSEBRACE",
  "\"else\"",
  "EQUALS",
  "$start",
  "stmts",
  "stmt",
  "declar",
  "expr",
  "if",
  "assign",
  "modifier",
  "type",
  "names",
  "subexpr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'new_compiler.y', 4)
  def _reduce_1(val, _values, result)
    puts val.inspect
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'new_compiler.y', 6)
  def _reduce_3(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 7)
  def _reduce_4(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 8)
  def _reduce_5(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 9)
  def _reduce_6(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 10)
  def _reduce_7(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 11)
  def _reduce_8(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 12)
  def _reduce_9(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 13)
  def _reduce_10(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 14)
  def _reduce_11(val, _values, result)
    puts val.inspect
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'new_compiler.y', 16)
  def _reduce_13(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 17)
  def _reduce_14(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 18)
  def _reduce_15(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 19)
  def _reduce_16(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 20)
  def _reduce_17(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 21)
  def _reduce_18(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 22)
  def _reduce_19(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 23)
  def _reduce_20(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 24)
  def _reduce_21(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 25)
  def _reduce_22(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 26)
  def _reduce_23(val, _values, result)
    puts val.inspect
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CompilerLanguage

=begin
		parser = CompilerLanguage.new
		count = 0
		scnt  = 0

		puts 'type "ctrl-d" to quit.'

    string_to_parse = ""
		while true do
			# puts
			# print '> '
      instr = gets
      break if !instr
      string_to_parse << instr
			#break if !str# == ?\C-d#/q/i === str
		end

    begin
      val = parser.parse( string_to_parse )
      p $ast
      # print '= ', val, "\n"
    rescue ParseError
      puts $!
    rescue
      puts 'unexpected error ?!'
      raise
=end
	end
