#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require './compiler.rex.rb'
	require './reflectivevisitor.rb'

	$ast = AbstractNode.new(:root)

class CompilerLanguage < Racc::Parser

module_eval(<<'...end new_compiler.y/module_eval...', 'new_compiler.y', 38)

	

...end new_compiler.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,     9,   -13,    10,    11,    13,    23,    31,    28,
    13,    14,    22,     7,    10,    11,     9,   -13,    10,    11,
    13,   -21,    26,    25,    13,    14,   -21,     7,    10,    11,
     9,   -13,    10,    11,    13,   -22,    35,    21,    13,    14,
   -22,     7,    10,    11,     9,   -13,    10,    11,    13,    36,
    10,    11,    13,    14,    33,     7,    13,    10,    11,   -20,
    34,    18,    28,    13,   -20,    39,    40,    17,    42,    43,
    44,    15,    46 ]

racc_action_check = [
     0,     0,     0,     0,     7,     7,     0,    12,    24,    20,
     7,     0,    12,     0,    44,    44,    44,    44,    33,    33,
    44,    11,    15,    14,    33,    44,    11,    44,     2,     2,
     2,     2,    23,    23,     2,    31,    28,     8,    23,     2,
    31,     2,    39,    39,    39,    39,    13,    13,    39,    32,
    25,    25,    13,    39,    27,    39,    25,    22,    22,    10,
    27,     6,    35,    22,    10,    36,    37,     4,    41,    42,
    43,     1,    45 ]

racc_action_pointer = [
    -3,    71,    25,   nil,    59,   nil,    53,     1,    31,   nil,
    57,    19,     5,    43,    14,    22,   nil,   nil,   nil,   nil,
     6,   nil,    54,    29,    -2,    47,   nil,    52,    23,   nil,
   nil,    33,    39,    15,   nil,    59,    54,    58,   nil,    39,
   nil,    56,    54,    59,    11,    60,   nil ]

racc_action_default = [
    -2,   -25,    -2,    -3,   -25,    -5,   -25,   -25,   -25,   -12,
   -15,   -16,   -25,   -25,   -25,   -25,    -1,    -4,    -6,    -7,
   -25,   -14,   -25,   -25,   -25,   -25,    47,   -25,   -10,   -17,
   -18,   -19,   -25,   -25,    -9,   -25,   -25,   -25,   -11,    -2,
    -8,   -25,   -23,   -25,    -2,   -25,   -24 ]

racc_goto_table = [
     1,    19,    16,    27,    20,   nil,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,    30,    38,    32,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    41,
   nil,   nil,   nil,   nil,    45 ]

racc_goto_check = [
     1,     4,     1,     9,     8,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,     9,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     1,
   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,    -6,   nil,   nil,   nil,    -4,   -17,
   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     8,   nil,   nil,
    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 18, :_reduce_1,
  0, 18, :_reduce_none,
  1, 19, :_reduce_3,
  2, 19, :_reduce_4,
  1, 19, :_reduce_5,
  2, 19, :_reduce_6,
  2, 23, :_reduce_7,
  6, 20, :_reduce_8,
  4, 20, :_reduce_9,
  1, 26, :_reduce_10,
  3, 26, :_reduce_11,
  1, 24, :_reduce_12,
  0, 24, :_reduce_none,
  1, 25, :_reduce_14,
  1, 21, :_reduce_15,
  1, 21, :_reduce_16,
  3, 21, :_reduce_17,
  3, 21, :_reduce_18,
  3, 21, :_reduce_19,
  1, 27, :_reduce_20,
  1, 27, :_reduce_21,
  3, 27, :_reduce_22,
  7, 22, :_reduce_23,
  11, 22, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 47

racc_token_table = {
  false => 0,
  :error => 1,
  :EQUALS => 2,
  :NAME => 3,
  :NUMBER => 4,
  :CONST => 5,
  :INT => 6,
  :OP => 7,
  :SEMICOLON => 8,
  :OPENPAREN => 9,
  :CLOSEPAREN => 10,
  :OPENBRACE => 11,
  :CLOSEBRACE => 12,
  :COMMA => 13,
  :IF => 14,
  :ELSE => 15,
  :RETURN => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EQUALS",
  "NAME",
  "NUMBER",
  "CONST",
  "INT",
  "OP",
  "SEMICOLON",
  "OPENPAREN",
  "CLOSEPAREN",
  "OPENBRACE",
  "CLOSEBRACE",
  "COMMA",
  "IF",
  "ELSE",
  "RETURN",
  "$start",
  "stmts",
  "stmt",
  "declar",
  "expr",
  "if",
  "return",
  "modifier",
  "type",
  "names",
  "subexpr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'new_compiler.y', 4)
  def _reduce_1(val, _values, result)
    result = StmtsNode.new('stmts', val[0], val[1]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'new_compiler.y', 6)
  def _reduce_3(val, _values, result)
     result = StmtNode.new('stmt', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 7)
  def _reduce_4(val, _values, result)
    result = StmtNode.new('stmt', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 8)
  def _reduce_5(val, _values, result)
     result = StmtNode.new('stmt', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 9)
  def _reduce_6(val, _values, result)
    result = StmtNode.new('stmt', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 10)
  def _reduce_7(val, _values, result)
    result = Return.new('return', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 11)
  def _reduce_8(val, _values, result)
     result = Declar.new('declar', val[0], val[1], val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 12)
  def _reduce_9(val, _values, result)
    result = Declar.new('declar', val[0], val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 13)
  def _reduce_10(val, _values, result)
    result = Names.new('names', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 14)
  def _reduce_11(val, _values, result)
    result = Names.new('names', val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 15)
  def _reduce_12(val, _values, result)
    result = Modifier.new('modifier', val[0])
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'new_compiler.y', 17)
  def _reduce_14(val, _values, result)
    	result = Type.new('type', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 18)
  def _reduce_15(val, _values, result)
     result = Expr.new('expr', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 19)
  def _reduce_16(val, _values, result)
     result = Expr.new('expr', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 20)
  def _reduce_17(val, _values, result)
    result = Expr.new('expr', val[0],val[1],val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 21)
  def _reduce_18(val, _values, result)
    result = Expr.new('expr', val[0], val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 22)
  def _reduce_19(val, _values, result)
    result = Expr.new('expr', val[0], val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 23)
  def _reduce_20(val, _values, result)
    result = Subexpr.new('subexpr', val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 24)
  def _reduce_21(val, _values, result)
    result = Subexpr.new('subexpr', val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 25)
  def _reduce_22(val, _values, result)
    result = Subexpr.new('subexpr', val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 26)
  def _reduce_23(val, _values, result)
    result = Subexpr.new('subexpr', val[0], val[2], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 27)
  def _reduce_24(val, _values, result)
    result = Subexpr.new('subexpr', val[0], val[2], val[5], val[7], val[9])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CompilerLanguage


	parser = CompilerLanguage.new
	begin
		val = parser.scan_str( $stdin.read)
		val.print_addr
		val.print_relations
	end


=begin
		parser = CompilerLanguage.new
		count = 0
		scnt  = 0

		puts 'type "ctrl-d" to quit.'

    string_to_parse = ""
		while true do
			# puts
			# print '> '
      instr = gets
      break if !instr
      string_to_parse << instr
			#break if !str# == ?\C-d#/q/i === str
		end

    begin
      val = parser.parse( string_to_parse )
      p $ast
      # print '= ', val, "\n"
    rescue ParseError
      puts $!
    rescue
      puts 'unexpected error ?!'
      raise
=end
	#end
