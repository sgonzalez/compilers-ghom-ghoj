#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require './compiler.rex.rb'
	require './reflectivevisitor.rb'

	$ast = AbstractNode.new(:root)

class CompilerLanguage < Racc::Parser

module_eval(<<'...end new_compiler.y/module_eval...', 'new_compiler.y', 63)

	

...end new_compiler.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,    10,   -14,    36,   -22,    14,    25,    29,   -20,
    37,    15,   -20,     8,    11,    12,    10,   -14,    22,    12,
    14,    31,   -21,    26,    14,    15,    34,     8,    11,    12,
    10,   -14,    22,    12,    14,    24,    20,    38,    14,    15,
    28,     8,    11,    12,    10,   -14,    22,    12,    14,    39,
    22,    12,    14,    15,    19,     8,    14,    22,    12,    22,
    12,    31,    42,    14,    43,    14,    18,    45,    46,    47,
    16,    49 ]

racc_action_check = [
     0,     0,     0,     0,    30,    34,     0,    11,    16,    22,
    30,     0,    11,     0,    47,    47,    47,    47,    36,    36,
    47,    23,    12,    13,    36,    47,    27,    47,     2,     2,
     2,     2,     8,     8,     2,     9,     7,    31,     8,     2,
    15,     2,    42,    42,    42,    42,    28,    28,    42,    35,
    14,    14,    28,    42,     6,    42,    14,    25,    25,    26,
    26,    38,    39,    25,    40,    26,     4,    44,    45,    46,
     1,    48 ]

racc_action_pointer = [
    -3,    70,    25,   nil,    58,   nil,    46,    28,    29,    29,
   nil,     5,    15,    16,    47,    31,     8,   nil,   nil,   nil,
   nil,   nil,     2,    18,   nil,    54,    56,    16,    43,   nil,
     2,    24,   nil,   nil,    -2,    39,    15,   nil,    58,    51,
    56,   nil,    39,   nil,    55,    53,    58,    11,    59,   nil ]

racc_action_default = [
    -2,   -26,    -2,    -3,   -26,    -5,   -26,   -26,   -26,   -26,
   -13,   -16,   -17,   -26,   -26,   -26,   -26,    -1,    -4,    -6,
    -7,    -8,   -16,   -26,   -15,   -26,   -26,   -26,   -26,    50,
   -26,   -11,   -25,   -18,   -19,   -26,   -26,   -10,   -26,   -26,
   -26,   -12,    -2,    -9,   -26,   -23,   -26,    -2,   -26,   -24 ]

racc_goto_table = [
     1,    21,    17,    23,   nil,    30,   nil,    27,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,    33,
    41,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44,   nil,   nil,   nil,   nil,    48 ]

racc_goto_check = [
     1,     4,     1,     9,   nil,    10,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,
    10,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     1,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,    -7,   nil,   nil,   nil,   nil,    -6,
   -18,   nil ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     7,     9,   nil,
   nil,    13 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 18, :_reduce_1,
  0, 18, :_reduce_none,
  1, 19, :_reduce_3,
  2, 19, :_reduce_4,
  1, 19, :_reduce_5,
  2, 19, :_reduce_6,
  2, 19, :_reduce_none,
  2, 24, :_reduce_none,
  6, 20, :_reduce_9,
  4, 20, :_reduce_10,
  1, 27, :_reduce_11,
  3, 27, :_reduce_12,
  1, 25, :_reduce_13,
  0, 25, :_reduce_none,
  1, 26, :_reduce_15,
  1, 21, :_reduce_16,
  1, 21, :_reduce_17,
  3, 21, :_reduce_18,
  3, 21, :_reduce_19,
  1, 28, :_reduce_20,
  1, 28, :_reduce_21,
  3, 28, :_reduce_22,
  7, 22, :_reduce_23,
  11, 22, :_reduce_24,
  3, 23, :_reduce_25 ]

racc_reduce_n = 26

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :EQUALS => 2,
  :NAME => 3,
  :NUMBER => 4,
  :CONST => 5,
  :INT => 6,
  :OP => 7,
  :SEMICOLON => 8,
  :OPENPAREN => 9,
  :CLOSEPAREN => 10,
  :OPENBRACE => 11,
  :CLOSEBRACE => 12,
  :COMMA => 13,
  :IF => 14,
  :ELSE => 15,
  :RETURN => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EQUALS",
  "NAME",
  "NUMBER",
  "CONST",
  "INT",
  "OP",
  "SEMICOLON",
  "OPENPAREN",
  "CLOSEPAREN",
  "OPENBRACE",
  "CLOSEBRACE",
  "COMMA",
  "IF",
  "ELSE",
  "RETURN",
  "$start",
  "stmts",
  "stmt",
  "declar",
  "expr",
  "if",
  "assign",
  "return",
  "modifier",
  "type",
  "names",
  "subexpr" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'new_compiler.y', 4)
  def _reduce_1(val, _values, result)
    puts "stmts"
										puts val.inspect
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'new_compiler.y', 7)
  def _reduce_3(val, _values, result)
     puts "stmt"
										puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 9)
  def _reduce_4(val, _values, result)
    puts "stmt"
												puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 11)
  def _reduce_5(val, _values, result)
     puts "stmt"
								puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 13)
  def _reduce_6(val, _values, result)
     puts "stmt"
														puts val.inspect
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'new_compiler.y', 18)
  def _reduce_9(val, _values, result)
     puts "declar"
																											puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 20)
  def _reduce_10(val, _values, result)
     puts "declar"
																					puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 22)
  def _reduce_11(val, _values, result)
    puts "names"
								puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 24)
  def _reduce_12(val, _values, result)
    puts "names"
			 											puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 26)
  def _reduce_13(val, _values, result)
    puts "modifier"
										puts val.inspect
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'new_compiler.y', 29)
  def _reduce_15(val, _values, result)
    	puts "type"
								puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 31)
  def _reduce_16(val, _values, result)
     puts "expr"
									puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 33)
  def _reduce_17(val, _values, result)
    puts "expr"
									puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 35)
  def _reduce_18(val, _values, result)
    puts "expr"
												 puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 39)
  def _reduce_19(val, _values, result)
    puts "expr"
																			puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 41)
  def _reduce_20(val, _values, result)
    puts "subexpr" 
									puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 43)
  def _reduce_21(val, _values, result)
    puts "subexpr"
				 						puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 45)
  def _reduce_22(val, _values, result)
    puts "subexpr"
				 																puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 47)
  def _reduce_23(val, _values, result)
    puts "if"
																																puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 49)
  def _reduce_24(val, _values, result)
    puts "if"
																																																puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 51)
  def _reduce_25(val, _values, result)
    puts "assign"
															puts val.inspect
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CompilerLanguage


	parser = CompilerLanguage.new
	begin
		val = parser.scan_str( $stdin.read)
		p val

		#rescue ParseError => e
		#	p e
	#		puts e.backtrace.inspect
	end


=begin
		parser = CompilerLanguage.new
		count = 0
		scnt  = 0

		puts 'type "ctrl-d" to quit.'

    string_to_parse = ""
		while true do
			# puts
			# print '> '
      instr = gets
      break if !instr
      string_to_parse << instr
			#break if !str# == ?\C-d#/q/i === str
		end

    begin
      val = parser.parse( string_to_parse )
      p $ast
      # print '= ', val, "\n"
    rescue ParseError
      puts $!
    rescue
      puts 'unexpected error ?!'
      raise
=end
	#end
