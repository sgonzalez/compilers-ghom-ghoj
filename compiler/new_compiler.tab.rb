#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require './compiler.rex.rb'
	require './reflectivevisitor.rb'

	$ast = AbstractNode.new(:root)

class CompilerLanguage < Racc::Parser

module_eval(<<'...end new_compiler.y/module_eval...', 'new_compiler.y', 39)

	

...end new_compiler.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     9,    10,     8,   -12,     9,    10,     8,   -12,    30,    25,
    10,    11,    25,    10,    31,    11,     9,    10,     8,   -12,
     9,    10,     8,   -12,    19,    25,    10,    11,    24,    18,
    22,    11,    25,    10,    25,    10,    21,    20,    17,    32,
    18,    33,    15,    24,    36,    37,    14,    39,    40,    41,
    12,    43 ]

racc_action_check = [
     0,     0,     0,     0,    41,    41,    41,    41,    23,    18,
    18,     0,    30,    30,    23,    41,     2,     2,     2,     2,
    36,    36,    36,    36,     9,    20,    20,     2,    16,     9,
    12,    36,    19,    19,    21,    21,    11,    10,     7,    24,
    25,    29,     6,    32,    33,    34,     4,    38,    39,    40,
     1,    42 ]

racc_action_pointer = [
    -3,    50,    13,   nil,    38,   nil,    34,    32,   nil,    22,
    30,    27,    30,   nil,   nil,   nil,    25,   nil,     6,    29,
    22,    31,   nil,     6,    26,    33,   nil,   nil,   nil,    31,
     9,   nil,    40,    33,    37,   nil,    17,   nil,    35,    33,
    38,     1,    39,   nil ]

racc_action_default = [
    -2,   -21,    -2,    -3,   -21,    -5,   -21,   -21,   -11,   -14,
   -15,   -21,   -21,    -1,    -4,    -6,   -21,   -13,   -21,   -21,
   -21,   -21,    44,   -21,    -9,   -14,   -16,   -20,   -17,   -21,
   -21,    -8,   -21,   -21,   -21,   -10,    -2,    -7,   -21,   -18,
   -21,    -2,   -21,   -19 ]

racc_goto_table = [
     1,    23,    13,    26,    27,    28,    29,    16,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    34,   nil,    35,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,
   nil,    42 ]

racc_goto_check = [
     1,     9,     1,     4,     4,     4,     4,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil,     1 ]

racc_goto_pointer = [
   nil,     0,   nil,   nil,   -15,   nil,   nil,   nil,     0,   -15 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     7,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 17, :_reduce_1,
  0, 17, :_reduce_none,
  1, 18, :_reduce_3,
  2, 18, :_reduce_4,
  1, 18, :_reduce_5,
  2, 18, :_reduce_6,
  6, 19, :_reduce_7,
  4, 19, :_reduce_8,
  1, 25, :_reduce_9,
  3, 25, :_reduce_10,
  1, 23, :_reduce_11,
  0, 23, :_reduce_none,
  1, 24, :_reduce_13,
  1, 20, :_reduce_14,
  1, 20, :_reduce_15,
  3, 20, :_reduce_16,
  3, 20, :_reduce_17,
  7, 21, :_reduce_18,
  11, 21, :_reduce_19,
  3, 22, :_reduce_20 ]

racc_reduce_n = 21

racc_shift_n = 44

racc_token_table = {
  false => 0,
  :error => 1,
  :EQUALS => 2,
  :NAME => 3,
  :NUMBER => 4,
  :CONST => 5,
  :INT => 6,
  :OP => 7,
  :SEMICOLON => 8,
  :OPENPAREN => 9,
  :CLOSEPAREN => 10,
  :OPENBRACE => 11,
  :CLOSEBRACE => 12,
  :COMMA => 13,
  :IF => 14,
  :ELSE => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EQUALS",
  "NAME",
  "NUMBER",
  "CONST",
  "INT",
  "OP",
  "SEMICOLON",
  "OPENPAREN",
  "CLOSEPAREN",
  "OPENBRACE",
  "CLOSEBRACE",
  "COMMA",
  "IF",
  "ELSE",
  "$start",
  "stmts",
  "stmt",
  "declar",
  "expr",
  "if",
  "assign",
  "modifier",
  "type",
  "names" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'new_compiler.y', 4)
  def _reduce_1(val, _values, result)
    puts val.inspect
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'new_compiler.y', 6)
  def _reduce_3(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 7)
  def _reduce_4(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 8)
  def _reduce_5(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 9)
  def _reduce_6(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 10)
  def _reduce_7(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 11)
  def _reduce_8(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 12)
  def _reduce_9(val, _values, result)
    puts "name"
								puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 14)
  def _reduce_10(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 15)
  def _reduce_11(val, _values, result)
    puts val.inspect
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'new_compiler.y', 17)
  def _reduce_13(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 18)
  def _reduce_14(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 19)
  def _reduce_15(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 20)
  def _reduce_16(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 21)
  def _reduce_17(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 26)
  def _reduce_18(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 27)
  def _reduce_19(val, _values, result)
    puts val.inspect
    result
  end
.,.,

module_eval(<<'.,.,', 'new_compiler.y', 28)
  def _reduce_20(val, _values, result)
    puts val.inspect
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class CompilerLanguage


	parser = CompilerLanguage.new
	begin
		val = parser.scan_str( $stdin.read)
		p val

		#rescue ParseError => e
		#	p e
	#		puts e.backtrace.inspect
	end


=begin
		parser = CompilerLanguage.new
		count = 0
		scnt  = 0

		puts 'type "ctrl-d" to quit.'

    string_to_parse = ""
		while true do
			# puts
			# print '> '
      instr = gets
      break if !instr
      string_to_parse << instr
			#break if !str# == ?\C-d#/q/i === str
		end

    begin
      val = parser.parse( string_to_parse )
      p $ast
      # print '= ', val, "\n"
    rescue ParseError
      puts $!
    rescue
      puts 'unexpected error ?!'
      raise
=end
	#end
