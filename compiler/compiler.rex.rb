#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "compiler.rex".
#++

require 'racc/parser'
class CompilerLanguage < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/[ \t]+/))
        ;

      when (text = @ss.scan(/\/\/.*/))
        ;

      when (text = @ss.scan(/\d+/))
         action { p [:NUMBER, text.to_i] }

      when (text = @ss.scan(/return/))
         action { p [:RETURN, text] }

      when (text = @ss.scan(/<</))
         action { p [:LEFT_BIT_SHIFT, text] }

      when (text = @ss.scan(/>>/))
         action { p [:RIGHT_BIT_SHIFT, text] }

      when (text = @ss.scan(/\-/))
         action { p [:MINUS, text] }

      when (text = @ss.scan(/\+/))
         action { p [:PLUS, text] }

      when (text = @ss.scan(/\*/))
         action { p [:MULTIPLY, text] }

      when (text = @ss.scan(/\//))
         action { p [:DIVIDE, text] }

      when (text = @ss.scan(/\!=/))
         action { p [:NOT_EQUALS, text] }

      when (text = @ss.scan(/==/))
         action { p [:EQUALS_EQUALS, text] }

      when (text = @ss.scan(/<=/))
         action { p [:LESS_EQUALS, text] }

      when (text = @ss.scan(/>=/))
         action { p [:GREATER_EQUALS, text] }

      when (text = @ss.scan(/\(/))
         action { p [:OPEN_PAREN, text] }

      when (text = @ss.scan(/\)/))
         action { p [:CLOSE_PAREN, text] }

      when (text = @ss.scan(/\{/))
         action { p [:OPEN_CURLY, text] }

      when (text = @ss.scan(/\}/))
         action { p [:CLOSE_CURLY, text] }

      when (text = @ss.scan(/>/))
         action { p [:GREATER, text] }

      when (text = @ss.scan(/</))
         action { p [:LESS, text] }

      when (text = @ss.scan(/=/))
         action { p [:EQUALS, text] }

      when (text = @ss.scan(/const/))
         action { p [:CONST, text] }

      when (text = @ss.scan(/int/))
         action { p [:INT, text] }

      when (text = @ss.scan(/,/))
         action { p [:COMMA, text] }

      when (text = @ss.scan(/;/))
         action { p [:SEMICOLON, text] }

      when (text = @ss.scan(/\w(\w|\d)*/))
         action { p [:NAME, text] }

      when (text = @ss.scan(/\w+/))
         action { p [:WORD, text] }

      when (text = @ss.scan(/\n/))
        ;

      when (text = @ss.scan(/./))
         action { p [:TEXT, text] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

  def tokenize(code)
    scan_setup(code)
    tokens = []
    while token = next_token
      tokens << token
    end
    tokens
  end
end # class
