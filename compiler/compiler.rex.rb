#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.2
# from lexical definition file "compiler.rex".
#++

require 'racc/parser'
class CompilerLanguage < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/BLANK/))
          ;

        when (text = ss.scan(/\d+/))
           @rex_tokens.push action { [:NUMBER, text.to_i] }

        when (text = ss.scan(/return/))
           @rex_tokens.push action { [:RETURN, text] }

        when (text = ss.scan(/<</))
           @rex_tokens.push action { [:BIT_SHIFT, text] }

        when (text = ss.scan(/-/))
           @rex_tokens.push action { [:MINUS, text] }

        when (text = ss.scan(/+/))
           @rex_tokens.push action { [:PLUS, text] }

        when (text = ss.scan(/\*/))
           @rex_tokens.push action { [:MULTIPLY, text] }

        when (text = ss.scan(///))
           @rex_tokens.push action { [:FOR_SLASH, text] }

        when (text = ss.scan(/\!=/))
           @rex_tokens.push action { [:NOT_EQUALS, text] }

        when (text = ss.scan(/==/))
           @rex_tokens.push action { [:EQUALS_EQUALS, text] }

        when (text = ss.scan(/<=/))
           @rex_tokens.push action { [:LESS_EQUALS, text] }

        when (text = ss.scan(/>=/))
           @rex_tokens.push action { [:GREATER_EQUALS, text] }

        when (text = ss.scan(/\(/))
           @rex_tokens.push action { [:OPEN_PAREN, text] }

        when (text = ss.scan(/\)/))
           @rex_tokens.push action { [:CLOSE_PAREN, text] }

        when (text = ss.scan(/\{/))
           @rex_tokens.push action { [:OPEN_CURLY, text] }

        when (text = ss.scan(/\}/))
           @rex_tokens.push action { [:CLOSE_CURLY, text] }

        when (text = ss.scan(/=/))
           @rex_tokens.push action { [:EQUALS, text] }

        when (text = ss.scan(/const/))
           @rex_tokens.push action { [:CONST, text] }

        when (text = ss.scan(/int/))
           @rex_tokens.push action { [:INT, text] }

        when (text = ss.scan(/,/))
           @rex_tokens.push action { [:COMMA, text] }

        when (text = ss.scan(/;/))
           @rex_tokens.push action { [:SEMICOLON, text] }

        when (text = ss.scan(/\w(\w|\d)*/))
           @rex_tokens.push action { [:NAME, text] }

        when (text = ss.scan(/\w+/))
           @rex_tokens.push action { [:WORD, text] }

        when (text = ss.scan(/\n/))
          ;

        when (text = ss.scan(/./))
           @rex_tokens.push action { [:TEXT, text] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

  def tokenize(code)
    scan_setup(code)
    tokens = []
    while token = next_token
      tokens << token
    end
    tokens
  end
end # class
