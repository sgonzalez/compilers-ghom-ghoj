var search_data = {"index":{"searchIndex":["abstractnode","compiler","compilerlanguage","scanerror","ifnode","needsbooleanpredicate","needscompatibletypes","reflectivevisitor","shiftnode","testcompilerlanguage","typechecking","_next_token()","_reduce_none()","accept()","accept()","action()","adopt_children()","children()","default_visit()","dispatch()","left_siblings()","load_file()","make_family()","make_siblings()","new()","next_token()","right_siblings()","scan()","scan_file()","scan_setup()","scan_str()","tokenize()","visit()","visit()","readme","build.sh","compiler.rex","created.rid","parse-tree-to-graphvis.py","setup.sh","test.lis","test"],"longSearchIndex":["abstractnode","compiler","compilerlanguage","compilerlanguage::scanerror","ifnode","needsbooleanpredicate","needscompatibletypes","reflectivevisitor","shiftnode","testcompilerlanguage","typechecking","compilerlanguage#_next_token()","compilerlanguage#_reduce_none()","ifnode#accept()","shiftnode#accept()","compilerlanguage#action()","abstractnode#adopt_children()","abstractnode#children()","reflectivevisitor#default_visit()","reflectivevisitor#dispatch()","abstractnode#left_siblings()","compilerlanguage#load_file()","abstractnode::make_family()","abstractnode#make_siblings()","abstractnode::new()","compilerlanguage#next_token()","abstractnode#right_siblings()","compilerlanguage#scan()","compilerlanguage#scan_file()","compilerlanguage#scan_setup()","compilerlanguage#scan_str()","compilerlanguage#tokenize()","reflectivevisitor#visit()","typechecking#visit()","","","","","","","",""],"info":[["AbstractNode","","AbstractNode.html","",""],["Compiler","","Compiler.html","",""],["CompilerLanguage","","CompilerLanguage.html","",""],["CompilerLanguage::ScanError","","CompilerLanguage/ScanError.html","",""],["IfNode","","IfNode.html","",""],["NeedsBooleanPredicate","","NeedsBooleanPredicate.html","",""],["NeedsCompatibleTypes","","NeedsCompatibleTypes.html","",""],["ReflectiveVisitor","","ReflectiveVisitor.html","",""],["ShiftNode","","ShiftNode.html","",""],["TestCompilerLanguage","","TestCompilerLanguage.html","",""],["TypeChecking","","TypeChecking.html","",""],["_next_token","CompilerLanguage","CompilerLanguage.html#method-i-_next_token","()",""],["_reduce_none","CompilerLanguage","CompilerLanguage.html#method-i-_reduce_none","(val, _values, result)",""],["accept","IfNode","IfNode.html#method-i-accept","(v)",""],["accept","ShiftNode","ShiftNode.html#method-i-accept","(v)",""],["action","CompilerLanguage","CompilerLanguage.html#method-i-action","()",""],["adopt_children","AbstractNode","AbstractNode.html#method-i-adopt_children","(y)",""],["children","AbstractNode","AbstractNode.html#method-i-children","()",""],["default_visit","ReflectiveVisitor","ReflectiveVisitor.html#method-i-default_visit","(n)",""],["dispatch","ReflectiveVisitor","ReflectiveVisitor.html#method-i-dispatch","(o)",""],["left_siblings","AbstractNode","AbstractNode.html#method-i-left_siblings","()",""],["load_file","CompilerLanguage","CompilerLanguage.html#method-i-load_file","( filename )",""],["make_family","AbstractNode","AbstractNode.html#method-c-make_family","(parent, *children)",""],["make_siblings","AbstractNode","AbstractNode.html#method-i-make_siblings","(y)",""],["new","AbstractNode","AbstractNode.html#method-c-new","(node_type=nil, leftmost_child=nil, leftmost_sibling=nil, right_sibling=nil, parent=nil)",""],["next_token","CompilerLanguage","CompilerLanguage.html#method-i-next_token","()",""],["right_siblings","AbstractNode","AbstractNode.html#method-i-right_siblings","()",""],["scan","CompilerLanguage","CompilerLanguage.html#method-i-scan","(str)",""],["scan_file","CompilerLanguage","CompilerLanguage.html#method-i-scan_file","( filename )",""],["scan_setup","CompilerLanguage","CompilerLanguage.html#method-i-scan_setup","(str)",""],["scan_str","CompilerLanguage","CompilerLanguage.html#method-i-scan_str","(str)",""],["tokenize","CompilerLanguage","CompilerLanguage.html#method-i-tokenize","(code)",""],["visit","ReflectiveVisitor","ReflectiveVisitor.html#method-i-visit","(n)",""],["visit","TypeChecking","TypeChecking.html#method-i-visit","(n)",""],["README","","README_txt.html","","<p>HOW TO COMPILE ./build.sh (assuming execute permissions)\n<p>HOW TO RUN ./compiler.rb (assuming execute permissions) …\n"],["build.sh","","build_sh.html","","<p>#!/bin/bash\n<p>racc compiler.y rex compiler.rex\n"],["compiler.rex","","compiler_rex.html","","<p>class CompilerLanguage macro\n\n<pre>BLANK                 [\\ \\t]+\nSINGLELINE            \\/\\/.*\nNUMBER        ...</pre>\n"],["created.rid","","doc/created_rid.html","",""],["parse-tree-to-graphvis.py","","parse-tree-to-graphvis_py.html","","<p>#!/usr/bin/env python\n<p>“”“A pathetically simple Python script to convert a simple tree\nrepresentation …\n"],["setup.sh","","setup_sh.html","","<p>alias gem=gem1.9.3 alias ruby=ruby1.9.3\n<p>export GEM_HOME=~/.gem export GEM_PATH=$GEM_HOME/bin export\nPATH=$GEM_PATH:$PATH …\n"],["test.lis","","test_lis.html","","<p>0x147d090 StmtList 0x147d0b0 sa 0x147d140 sb 0x147d1b0 sq 0x147d240 sr\n0x147d5d0 if-else 0x147d2f0 ea …\n"],["test","","test_txt.html","","<p>// language example 0 const int a = 1; int x = 1&lt;&lt;a; int y, z = 3;\n<p>y = z - x; if ( y &lt;= 0 ) { …\n"]]}}