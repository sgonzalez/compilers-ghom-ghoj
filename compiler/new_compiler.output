

-------- Grammar --------

rule 1 stmts: stmt stmts
rule 2 stmts: 
rule 3 stmt: declar
rule 4 stmt: expr SEMICOLON
rule 5 stmt: if
rule 6 stmt: assign SEMICOLON
rule 7 declar: modifier type names EQUALS expr SEMICOLON
rule 8 declar: modifier type names SEMICOLON
rule 9 names: NAME
rule 10 names: NAME COMMA names
rule 11 modifier: CONST
rule 12 modifier: 
rule 13 type: INT
rule 14 expr: NAME
rule 15 expr: NUMBER
rule 16 expr: subexpr OP expr
rule 17 expr: OPENPAREN expr CLOSEPAREN
rule 18 subexpr: NAME
rule 19 subexpr: NUMBER
rule 20 subexpr: OPENPAREN expr CLOSEPAREN
rule 21 if: IF expr OPENBRACE stmts CLOSEBRACE
rule 22 assign: NAME EQUALS expr

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (16)
    on right: 
    on left : 
  stmts (17)
    on right: 1 21
    on left : 1 2
  stmt (18)
    on right: 1
    on left : 3 4 5 6
  declar (19)
    on right: 3
    on left : 7 8
  expr (20)
    on right: 4 7 16 17 20 21 22
    on left : 14 15 16 17
  if (21)
    on right: 5
    on left : 21
  assign (22)
    on right: 6
    on left : 22
  modifier (23)
    on right: 7 8
    on left : 11 12
  type (24)
    on right: 7 8
    on left : 13
  names (25)
    on right: 7 8 10
    on left : 9 10
  subexpr (26)
    on right: 16
    on left : 18 19 20

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  EQUALS (2) 7 22
  NAME (3) 9 10 14 18 22
  NUMBER (4) 15 19
  CONST (5) 11
  INT (6) 13
  OP (7) 16
  SEMICOLON (8) 4 6 7 8
  OPENPAREN (9) 17 20
  CLOSEPAREN (10) 17 20
  OPENBRACE (11) 21
  CLOSEBRACE (12) 21
  COMMA (13) 10
  IF (14) 21
  ELSE (15) 

--------- State ---------

state 0


  NAME          shift, and go to state 9
  NUMBER        shift, and go to state 10
  CONST         shift, and go to state 8
  OPENPAREN     shift, and go to state 12
  IF            shift, and go to state 13
  INT           reduce using rule 12 (modifier)
  $default      reduce using rule 2 (stmts)

  stmts         go to state 1
  stmt          go to state 2
  declar        go to state 3
  expr          go to state 4
  if            go to state 5
  assign        go to state 6
  modifier      go to state 7
  subexpr       go to state 11

state 1


  $end          shift, and go to state 14


state 2

   1) stmts : stmt _ stmts

  NAME          shift, and go to state 9
  NUMBER        shift, and go to state 10
  CONST         shift, and go to state 8
  OPENPAREN     shift, and go to state 12
  IF            shift, and go to state 13
  INT           reduce using rule 12 (modifier)
  $default      reduce using rule 2 (stmts)

  stmt          go to state 2
  stmts         go to state 15
  declar        go to state 3
  expr          go to state 4
  if            go to state 5
  assign        go to state 6
  modifier      go to state 7
  subexpr       go to state 11

state 3

   3) stmt : declar _

  $default      reduce using rule 3 (stmt)


state 4

   4) stmt : expr _ SEMICOLON

  SEMICOLON     shift, and go to state 16


state 5

   5) stmt : if _

  $default      reduce using rule 5 (stmt)


state 6

   6) stmt : assign _ SEMICOLON

  SEMICOLON     shift, and go to state 17


state 7

   7) declar : modifier _ type names EQUALS expr SEMICOLON
   8) declar : modifier _ type names SEMICOLON

  INT           shift, and go to state 19

  type          go to state 18

state 8

  11) modifier : CONST _

  $default      reduce using rule 11 (modifier)


state 9

  14) expr : NAME _
  18) subexpr : NAME _
  22) assign : NAME _ EQUALS expr

  EQUALS        shift, and go to state 20
  OP            reduce using rule 18 (subexpr)
  $default      reduce using rule 14 (expr)


state 10

  15) expr : NUMBER _
  19) subexpr : NUMBER _

  OP            reduce using rule 19 (subexpr)
  $default      reduce using rule 15 (expr)


state 11

  16) expr : subexpr _ OP expr

  OP            shift, and go to state 21


state 12

  17) expr : OPENPAREN _ expr CLOSEPAREN
  20) subexpr : OPENPAREN _ expr CLOSEPAREN

  NAME          shift, and go to state 22
  NUMBER        shift, and go to state 10
  OPENPAREN     shift, and go to state 12

  subexpr       go to state 11
  expr          go to state 23

state 13

  21) if : IF _ expr OPENBRACE stmts CLOSEBRACE

  NAME          shift, and go to state 22
  NUMBER        shift, and go to state 10
  OPENPAREN     shift, and go to state 12

  subexpr       go to state 11
  expr          go to state 24

state 14


  $end          shift, and go to state 25


state 15

   1) stmts : stmt stmts _

  $default      reduce using rule 1 (stmts)


state 16

   4) stmt : expr SEMICOLON _

  $default      reduce using rule 4 (stmt)


state 17

   6) stmt : assign SEMICOLON _

  $default      reduce using rule 6 (stmt)


state 18

   7) declar : modifier type _ names EQUALS expr SEMICOLON
   8) declar : modifier type _ names SEMICOLON

  NAME          shift, and go to state 27

  names         go to state 26

state 19

  13) type : INT _

  $default      reduce using rule 13 (type)


state 20

  22) assign : NAME EQUALS _ expr

  NAME          shift, and go to state 22
  NUMBER        shift, and go to state 10
  OPENPAREN     shift, and go to state 12

  subexpr       go to state 11
  expr          go to state 28

state 21

  16) expr : subexpr OP _ expr

  NAME          shift, and go to state 22
  NUMBER        shift, and go to state 10
  OPENPAREN     shift, and go to state 12

  subexpr       go to state 11
  expr          go to state 29

state 22

  14) expr : NAME _
  18) subexpr : NAME _

  OP            reduce using rule 18 (subexpr)
  $default      reduce using rule 14 (expr)


state 23

  17) expr : OPENPAREN expr _ CLOSEPAREN
  20) subexpr : OPENPAREN expr _ CLOSEPAREN

  CLOSEPAREN    shift, and go to state 30


state 24

  21) if : IF expr _ OPENBRACE stmts CLOSEBRACE

  OPENBRACE     shift, and go to state 31


state 25


  $default      accept


state 26

   7) declar : modifier type names _ EQUALS expr SEMICOLON
   8) declar : modifier type names _ SEMICOLON

  EQUALS        shift, and go to state 32
  SEMICOLON     shift, and go to state 33


state 27

   9) names : NAME _
  10) names : NAME _ COMMA names

  COMMA         shift, and go to state 34
  $default      reduce using rule 9 (names)


state 28

  22) assign : NAME EQUALS expr _

  $default      reduce using rule 22 (assign)


state 29

  16) expr : subexpr OP expr _

  $default      reduce using rule 16 (expr)


state 30

  17) expr : OPENPAREN expr CLOSEPAREN _
  20) subexpr : OPENPAREN expr CLOSEPAREN _

  OP            reduce using rule 20 (subexpr)
  $default      reduce using rule 17 (expr)


state 31

  21) if : IF expr OPENBRACE _ stmts CLOSEBRACE

  NAME          shift, and go to state 9
  NUMBER        shift, and go to state 10
  CONST         shift, and go to state 8
  OPENPAREN     shift, and go to state 12
  IF            shift, and go to state 13
  INT           reduce using rule 12 (modifier)
  $default      reduce using rule 2 (stmts)

  stmt          go to state 2
  declar        go to state 3
  expr          go to state 4
  if            go to state 5
  assign        go to state 6
  modifier      go to state 7
  subexpr       go to state 11
  stmts         go to state 35

state 32

   7) declar : modifier type names EQUALS _ expr SEMICOLON

  NAME          shift, and go to state 22
  NUMBER        shift, and go to state 10
  OPENPAREN     shift, and go to state 12

  expr          go to state 36
  subexpr       go to state 11

state 33

   8) declar : modifier type names SEMICOLON _

  $default      reduce using rule 8 (declar)


state 34

  10) names : NAME COMMA _ names

  NAME          shift, and go to state 27

  names         go to state 37

state 35

  21) if : IF expr OPENBRACE stmts _ CLOSEBRACE

  CLOSEBRACE    shift, and go to state 38


state 36

   7) declar : modifier type names EQUALS expr _ SEMICOLON

  SEMICOLON     shift, and go to state 39


state 37

  10) names : NAME COMMA names _

  $default      reduce using rule 10 (names)


state 38

  21) if : IF expr OPENBRACE stmts CLOSEBRACE _

  $default      reduce using rule 21 (if)


state 39

   7) declar : modifier type names EQUALS expr SEMICOLON _

  $default      reduce using rule 7 (declar)

